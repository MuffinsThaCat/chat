{"version":3,"sources":["logo.svg","utils/syntaxLookup.js","utils/ipfs.js","components/ChatBox.js","context.js","components/ChatHeader.js","components/Userlist.jsx","components/ChatRoom.js","components/ChannelBox.js","utils/parsers.js","components/ChannelList.js","components/ContextFilter.js","components/ContextPanel.js","images/status-logo.js","images/js-logo.js","images/statusjs-logo.js","components/Login.js","utils/actors.js","utils/keyManagement.js","utils/store.js","components/Loaders.js","utils/windows.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","syntaxLookup","bs","bf","c","cp","cl","cs","dk","ht","js","jn","jx","la","ma","md","nm","pb","pu","py","sq","ts","vi","ym","fileUpload","node","filePath","file","fileReaderPullStream","Promise","resolve","reject","files","add","err","uploadFileAndSend","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","sendFn","hash","text","wrap","_context","prev","next","name","path","type","sent","concat","stop","this","_x","_x2","_x3","apply","arguments","getFile","CID","get","ipfsMatcher","Matcher","begin","find","MessageRender","match","message","emojis","regex1","RegExp","exec","push","react_default","createElement","dist_es","emoji","size","parts","split","forEach","part","i","className","key","SyntaxLookup","slice","prism","language","style","atomDark","Linkify_default","wordWrap","whiteSpace","ChatBox","state","imgUrl","getImageFromIpfs","_this$props","ipfs","content","arrayBufferView","blob","_this","props","Uint8Array","Blob","URL","createObjectURL","setState","test","url","_this$props2","username","pubkey","react","ListItem_default","Avatar_default","ListItemAvatar_default","lib_default","diameter","seed","jsNumberForAddress","ListItemText_default","primary","secondary","ChatBox_MessageRender","indexOf","YouTube","videoId","undefined","replace","opts","height","width","playerVars","autoplay","isSpotifyLink","SpotifyPlayer_default","uri","view","theme","src","alt","maxWidth","isImage","imageUrl","displayImage","PureComponent","ChatContext","React","createContext","ChatHeader","displayChannelStats","handleClose","handleOpen","heartBeat","clearInterval","heartBeatId","_this2","setInterval","forceUpdate","_this3","currentChannel","toggleSidebar","Consumer","channels","channelUsers","users","usersList","keys","currentTime","Date","getTime","Dialog_default","onClose","aria-labelledby","open","DialogTitle_default","List_default","map","user","button","lastSeen","userOffline","OfflineBolt_default","color","CheckCircle_default","CardContent_default","flexBasis","paddingBottom","Typography_default","variant","component","display","alignItems","PersonOutline_default","grey","onClick","length","marginLeft","Info_default","online","green","offline","blueGrey","scrolling","overflow","Userlist","allUsers","sort","x","y","xIsOnline","yIsOnline","sortUsers","paddingLeft","FiberManualRecordOutlined_default","margin","FiberManualRecord_default","Tooltip_default","title","placement","WhoIsTyping","usersTyping","typingInChannel","typingUsers","lastTyped","userList","whoIsTyping","textAlign","join","AutoScrollList","autoscroll","List","formStyle","justifyContent","ChatRoomForm","createRef","NameInput","ChatRoom","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","toggleInfoPanel","infoPanelActive","showEmojis","e","fileInput","click","event","sendMessage","target","chatInput","setValue","console","log","id","current","labelNode","focus","_this$props3","messages","typingEvent","_this$state","messagesHeight","flexWrap","boxSizing","ref","input","onChange","fileChangedHandler","bind","Grid_default","xs","item","es","onDrop","r","acceptedFiles","rejectedFiles","disableClick","position","activeStyle","backgroundColor","outline","alignSelf","outlineOffset","container","direction","justify","components_ChatHeader","Divider_default","overflowY","data","payload","components_ChatBox","assign","formik_esm","initialValues","onSubmit","values","setSubmitting","resetForm","_ref2","errors","touched","handleChange","handleBlur","handleSubmit","setFieldValue","Button_default","uploadFileDialog","AddCircle_default","TextField_default","multiline","flexGrow","label","fullWidth","onKeyDown","value","shiftKey","keyCode","preventDefault","cursor","selectionStart","submitForm","keyDownHandler","onBlur","onSelect","addEmoji","bottom","right","toggleEmojis","ChatRoom_WhoIsTyping","borderLeft","minHeight","components_Userlist","Component","ChannelBox","channelName","setActiveChannel","selected","padding","CONTACT_CODE_REGEXP","isContactCode","str","ChannelBoxes","marginBottom","channel","components_ChannelBox","ChannelList","channelList","onlyChannels","filter","directMessages","ChannelList_ChannelBoxes","ContextFilter","handleClickOpen","joinConversation","verticalAlign","DialogContent_default","DialogContentText_default","autoFocus","DialogActions_default","ContextPanel","styles","sidebar","borderRight","components_ContextFilter","components_ChannelList","StatusLogo","xmlns","d","fill","fillRule","JSLogo","viewBox","StatusJSLogo","status_logo","js_logo","containerStyle","flexDirection","Login","setupKeyringController","keyStore","wipeKeyStore","connect","password","setFieldError","catch","_ref3","statusjs_logo","href","isNull","rows","error","helperText","User","store","Store","localStorage","getItem","val","setItem","configName","defaults","vault","createVault","mnemonic","keyRingController","KeyringController","createNewVaultAndRestore","getState","storeKeyData","JSON","stringify","abrupt","restoreVault","_callee2","_context2","parse","getKeyData","initState","submitPassword","set","wipeVault","FullScreenLoader","react_spinners","sizeUnit","openBrowserWindow","window","addWindowEventListeners","statusVerbose","addEventListener","msg","source","parent","typingNotificationsTimestamp","DEFAULT_CHANNEL","status","StatusJS","Home","defineProperty","identity","loading","account","connectToProvider","server","provider","onConnect","keyringController","exportAccount","then","joinChannel","pingChannel","createOnUserMessageHandler","setTimeout","getMyIdentities","openBrowser","pingInterval","sendJsonMessage","accounts","t0","getAccounts","contact","_assertThisInitialize","assertThisInitialized","addDirectMessage","contactCode","addContact","addConversationEntry","code","changeChannel","objectSpread","joinChat","onMessage","handleProtocolMessages","sig","prevState","existing","toConsumableArray","onUserMessage","res","sender","addUserToChannel","getChannel","_callee3","publicKey","_context3","getPublicKey","getUserName","fromUser","addOrUpdateUserKey","now","lastEvent","connectMurMur","IPFS","shutdown","Murmur","protocols","signalServers","bootnodes","start","_this$state2","chatContext","Provider","Loaders_FullScreenLoader","isNil","src_components_ContextPanel","components_ChatRoom","components_Login","App","Home_Home","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e52eaaa.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// all options available here: https://github.com/conorhastings/react-syntax-highlighter/blob/master/AVAILABLE_LANGUAGES_PRISM.MD\nexport default {\n  'bs': 'bash',\n  'bf': 'brainfuck',\n  'c': 'c',\n  'cp': 'cpp',\n  'cl': 'clojure',\n  'cs': 'css',\n  'dk': 'docker',\n  'ht': 'http',\n  'js': 'javascript',\n  'jn': 'json',\n  'jx': 'jsx',\n  'la': 'latex',\n  'ma': 'makefile',\n  'md': 'markdown',\n  'nm': 'nim',\n  'pb': 'protobuf',\n  'pu': 'puppet',\n  'py': 'python',\n  'sq': 'sql',\n  'ts': 'typescript',\n  'vi': 'vim',\n  'ym': 'yaml'\n}\n","import fileReaderPullStream from 'pull-file-reader'\n\nexport const fileUpload = (node, filePath) => {\n  const file = fileReaderPullStream(filePath)\n  return new Promise(function(resolve, reject) {\n    node.files.add(file, (err, files) => {\n      if (err) return reject(err)\n      else resolve(files)\n    })\n  })\n}\n\nexport const uploadFileAndSend = async (node, file, sendFn) => {\n  const { name, path, type } = file;\n  const files = await fileUpload(node, file);\n  const { hash } = files[0];\n  const text = `/ipfs/${hash}`;\n  sendFn(text);\n}\n\nexport const getFile = (node, CID) => {\n  return new Promise(function(resolve, reject) {\n    node.files.get(CID, function (err, files) {\n      if (err) reject(err)\n      else resolve(files)\n    })\n  })\n}\n","// @flow\nimport React, { Fragment, PureComponent } from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport YouTube from 'react-youtube';\nimport Linkify from 'react-linkify';\nimport SpotifyPlayer from 'react-spotify-player';\nimport { Emoji } from 'emoji-mart';\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { atomDark } from 'react-syntax-highlighter/dist/cjs/styles/prism';\nimport { Matcher } from '@areknawo/rex'\nimport SyntaxLookup from '../utils/syntaxLookup';\nimport { getFile } from '../utils/ipfs';\n\nconst ipfsMatcher = new Matcher().begin().find('/ipfs/');\n\n// TODO: not exactly bulletproof right now, needs proper regex\nfunction hasYoutubeLink(text) {\n  return text.indexOf('http://www.youtube.com') >= 0 || text.indexOf('https://www.youtube.com') >= 0;\n}\n\n// TODO: not exactly bulletproof right now, needs proper regex\nfunction isSpotifyLink(text) {\n  return text.indexOf('spotify:') >= 0 ;\n}\n\n// https://gist.github.com/takien/4077195#\nfunction getYoutubeId(url) {\n  let ID = '';\n  url = url.replace(/(>|<)/gi,'').split(/(vi\\/|v=|\\/v\\/|youtu\\.be\\/|\\/embed\\/)/);\n  if (url[2] !== undefined) {\n    ID = url[2].split(/[^0-9a-z_\\-]/i);\n    ID = ID[0];\n  }\n  else {\n    ID = url;\n  }\n  return ID;\n}\n\nfunction isImage(text) {\n  return text.indexOf(\"http\") >= 0 && (text.indexOf('.jpg') || text.indexOf('.gif'));\n}\n\n// TODO: this needs to be reviewed. best to return as a css background-image instead\nfunction displayImage(text) {\n\n  let reg = new RegExp(/\\b(https?:\\/\\/\\S+(?:png|jpe?g|gif)\\S*)\\b/);\n  let imageUrl = reg.exec(text);\n  if (!imageUrl) return (<span></span>);\n  return (<img src={imageUrl[0]} style={{maxWidth: '90%'}} />)\n}\n\n// TODO use regex for code parsing / detection. Add new line detection for shift+enter\nconst MessageRender = ({ message }) => {\n  const emojis = [];\n  let match;\n  const regex1 = RegExp(/:[\\-a-zA-Z_+0-9]+:/g);\n  while ((match = regex1.exec(message)) !== null) {\n    emojis.push(<Emoji emoji={match[0]} size={16} />);\n  }\n\n  const parts = message.split(regex1);\n  parts.forEach((part, i) => {\n    parts[i] = <span className=\"match\" key={i}>{part}{emojis[i]}</span>;\n  });\n\n  return (message[2] === \"`\" && SyntaxLookup[message.slice(0,2)]\n    ? <SyntaxHighlighter language={SyntaxLookup[message.slice(0,2)]} style={atomDark}>{message.slice(3)}</SyntaxHighlighter>\n    : <Linkify><span style={{ wordWrap: 'break-word', whiteSpace: 'pre-line' }}>{parts}</span></Linkify>)\n};\n\nclass ChatBox extends PureComponent {\n\n  state = {\n    imgUrl: null\n  };\n\n  componentDidMount() {\n    const { message } = this.props;\n    if (ipfsMatcher.test(message)) this.getImageFromIpfs();\n  }\n\n  getImageFromIpfs = async () => {\n    const { ipfs, message } = this.props;\n    const files = await getFile(ipfs, message);\n    const { content } = files[0];\n    const arrayBufferView = new Uint8Array(content);\n    const blob = new Blob([ arrayBufferView ], { type: \"image/jpeg\" });\n    const imgUrl = URL.createObjectURL(blob);\n    this.setState({ imgUrl });\n  };\n\n  render() {\n    const { username, message, pubkey } = this.props;\n    const { imgUrl } = this.state;\n    return (\n      <Fragment>\n        <ListItem>\n          <Avatar>\n            <ListItemAvatar>\n              <Avatar>\n                {pubkey && <Jazzicon diameter={40} seed={jsNumberForAddress(pubkey)}/>}\n              </Avatar>\n            </ListItemAvatar>\n          </Avatar>\n          <ListItemText primary={`${username}`} secondary={<MessageRender message={message}/>}/>\n        </ListItem>\n        {hasYoutubeLink(message) &&\n        <ListItem>\n          <YouTube\n            videoId={getYoutubeId(message)}\n            opts={{ height: '390', width: '640', playerVars: { autoplay: 0 } }}\n          />\n        </ListItem>\n        }\n        {isSpotifyLink(message) &&\n        <ListItem>\n          <SpotifyPlayer\n            uri={message}\n            size={{ 'width': 300, 'height': 300 }}\n            view='list'\n            theme='black'\n          />\n        </ListItem>\n        }\n        {!!imgUrl && <img src={imgUrl} alt='ipfs' style={{maxWidth: '90%'}} />}\n        {isImage(message) && displayImage(message)}\n      </Fragment>\n    );\n  };\n}\n\nexport default ChatBox;\n","import React from 'react';\n\nexport const ChatContext = React.createContext('chat');\n","import React, { PureComponent } from 'react';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport grey from '@material-ui/core/colors/grey';\nimport PersonIcon from '@material-ui/icons/PersonOutline';\nimport Dialog from '@material-ui/core/Dialog';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Avatar from '@material-ui/core/Avatar';\nimport CheckCircle from '@material-ui/icons/CheckCircle';\nimport OfflineBolt from '@material-ui/icons/OfflineBolt';\nimport Info from '@material-ui/icons/Info';\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\nimport { ChatContext } from '../context';\n\nclass ChatHeader extends PureComponent {\n\n  state = {\n    displayChannelStats: false\n  }\n\n  componentDidMount() {\n    this.heartBeat();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.heartBeatId);\n  }\n\n  handleClose = () => {\n    this.setState({ displayChannelStats: false });\n  }\n\n  handleOpen = () => {\n    this.setState({ displayChannelStats: true });\n  }\n\n  heartBeat() {\n    this.heartBeatId = setInterval(() => { this.forceUpdate() }, 5000)\n  }\n\n  render() {\n    const { currentChannel, toggleSidebar } = this.props;\n    const { displayChannelStats } = this.state;\n    return (\n      <ChatContext.Consumer>\n      {({ channels }) => {\n        const channelUsers = channels[currentChannel].users;\n        const usersList = Object.keys(channelUsers);\n        const currentTime = new Date().getTime();\n        const userOffline = user => currentTime - user.lastSeen > 10*1000\n        return (\n          <div>\n            {channels[currentChannel].users && <Dialog onClose={this.handleClose} aria-labelledby=\"simple-dialog-title\" open={displayChannelStats}>\n              <DialogTitle>{`Users Online in #${currentChannel}`}</DialogTitle>\n              <div>\n                <List>\n                  {usersList.map(user => (\n                    <ListItem button key={channelUsers[user].pubkey}>\n                      {userOffline(channelUsers[user]) ? <OfflineBolt style={{ color: 'red' }} /> : <CheckCircle style={{ color: 'green' }} />}\n                      <ListItemAvatar>\n                        <Avatar>\n                          <Jazzicon diameter={40} seed={jsNumberForAddress(channelUsers[user].pubkey)} />\n                        </Avatar>\n                      </ListItemAvatar>\n                      <ListItemText primary={channelUsers[user].username} secondary={`Last seen on ${new Date(channelUsers[user].lastSeen)}`}/>\n                    </ListItem>\n                  ))}\n                </List>\n              </div>\n            </Dialog>}\n            <CardContent style={{ flexBasis: '10%', paddingBottom: '0px' }}>\n              <Typography variant=\"h5\" component=\"h2\">\n                {channels[currentChannel].username ? `${channels[currentChannel].username}` : `#${currentChannel}`}\n              </Typography>\n              <div style={{ display: 'flex', alignItems: 'center' }}>\n                <PersonIcon style={{ color: grey[500] }} onClick={this.handleOpen}/><div style={{ color: grey[500] }}>{usersList.length}</div>\n                <span style={{ marginLeft: 'auto' }}>\n                  <Info style={{ color: grey[500] }} onClick={toggleSidebar} />\n                </span>\n              </div>\n            </CardContent>\n          </div>\n        )\n      }\n      }\n      </ChatContext.Consumer>\n    )\n  }\n}\n\nexport default ChatHeader;\n","import React, { PureComponent } from 'react';\nimport blueGrey from '@material-ui/core/colors/blueGrey';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Avatar from '@material-ui/core/Avatar';\nimport FiberManualRecord from '@material-ui/icons/FiberManualRecord';\nimport FiberManualRecordOutlined from '@material-ui/icons/FiberManualRecordOutlined';\nimport Jazzicon, { jsNumberForAddress } from 'react-jazzicon'\nimport green from '@material-ui/core/colors/green';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport { ChatContext } from '../context';\n\nconst online = green['500'];\nconst offline = blueGrey['500'];\nconst scrolling = { height: '100vh', overflow: 'scroll' };\n\nconst sortUsers = (channelUsers, allUsers) => Object.keys(channelUsers).sort((x,y) => {\n  const currentTime = (new Date().getTime());\n  const xIsOnline = ((currentTime - allUsers[x].lastSeen) > 10*1000) ? 1 : -1;\n  const yIsOnline = ((currentTime - allUsers[y].lastSeen) > 10*1000) ? 1 : -1;\n\n  if (xIsOnline > yIsOnline) return 1;\n  if (xIsOnline < yIsOnline) return -1;\n  if (x.username < y.username) return -1;\n  if (x.username > y.username) return 1;\n  return 0;\n});\n\n\nclass Userlist extends PureComponent {\n\n  componentDidMount() {\n    this.heartBeat();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.heartBeatId);\n  }\n\n  heartBeat() {\n    this.heartBeatId = setInterval(() => { this.forceUpdate() }, 5000)\n  }\n\n  render() {\n    return (\n      <ChatContext.Consumer>\n        {({ channels, currentChannel, users }) => {\n           const channelUsers = channels[currentChannel].users;\n           const usersList = sortUsers(channelUsers, users);\n           const currentTime = new Date().getTime();\n           const userOffline = user => currentTime - user.lastSeen > 10*1000\n           return (\n             <div style={scrolling}>\n               <List style={scrolling}>\n                 {usersList.map(user => (\n                   <ListItem button key={channelUsers[user].pubkey} style={{ display: 'flex', paddingLeft: '5px' }}>\n                     <div style={{ display: 'flex' }}>\n                       {userOffline(channelUsers[user]) ? <FiberManualRecordOutlined style={{ color: offline, margin: 'auto' }} /> : <FiberManualRecord style={{ color: online, margin: 'auto' }} />}\n                       <ListItemAvatar>\n                         <Avatar>\n                           <Jazzicon diameter={40} seed={jsNumberForAddress(channelUsers[user].pubkey)} />\n                         </Avatar>\n                       </ListItemAvatar>\n                     </div>\n                     <Tooltip title={`Last seen on ${new Date(channelUsers[user].lastSeen)}`} placement=\"top-start\">\n                       <ListItemText primary={channelUsers[user].username} />\n                     </Tooltip>\n                   </ListItem>\n                 ))}\n               </List>\n             </div>\n           )\n        }\n        }\n      </ChatContext.Consumer>\n    )\n  }\n}\n\nexport default Userlist;\n","// @flow\nimport React, { Fragment, Component, PureComponent, createRef } from 'react';\nimport { Formik } from 'formik';\nimport autoscroll from 'autoscroll-react';\nimport List from '@material-ui/core/List';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Dropzone from 'react-dropzone';\nimport { Picker } from 'emoji-mart';\nimport AddCircle from '@material-ui/icons/AddCircle';\n\nimport 'emoji-mart/css/emoji-mart.css';\n\nimport ChatBox from './ChatBox';\nimport ChatHeader from './ChatHeader';\nimport Userlist from './Userlist';\nimport { uploadFileAndSend } from '../utils/ipfs';\n\nclass WhoIsTyping extends PureComponent {\n\n  whoIsTyping() {\n    const { users, usersTyping, currentChannel } = this.props;\n    const currentTime = new Date().getTime();\n\n    const typingInChannel = usersTyping[currentChannel];\n    const typingUsers = [];\n    for (let pubkey in typingInChannel) {\n      const lastTyped = typingInChannel[pubkey];\n      if (!users[pubkey]) continue;\n      if (currentTime - lastTyped > 3*1000 || currentTime < lastTyped) continue;\n      typingUsers.push(users[pubkey].username)\n    }\n    return typingUsers;\n  }\n\n  render() {\n    const userList = this.whoIsTyping();\n    return (\n      <div style={{ textAlign: 'center' }}>\n        {!userList.length ? \"\" : `${userList.join(',')} is typing`}\n      </div>\n    )\n  }\n}\n\nfunction onDrop(acceptedFiles, rejectedFiles, ipfs, sendMessage) {\n  const file = acceptedFiles[0];\n  uploadFileAndSend(ipfs, file, sendMessage);\n}\n\nconst keyDownHandler = (e, typingEvent, setValue, value) => {\n  if(e.shiftKey && e.keyCode === 13) {\n\t  e.preventDefault();\n    const cursor = e.target.selectionStart;\n    const newValue = `${value.slice(0, cursor)}\\n${value.slice(cursor)}`;\n    setValue('chatInput', newValue);\n  }\n  else if (e.keyCode === 13) {\n    e.preventDefault();\n    const form = ChatRoomForm.current;\n    form.submitForm();\n  }\n  typingEvent(e)\n};\n\nconst AutoScrollList = autoscroll(List);\nconst formStyle = { display: 'flex', justifyContent: 'center', alignItems: 'center', flexBasis: '10%' };\nconst ChatRoomForm = createRef();\nconst NameInput = createRef();\nconst messagesOffset = 185;\nclass ChatRoom extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showEmojis: false,\n      infoPanelActive: true\n    };\n  }\n\n  toggleEmojis(e) {\n    this.setState(({ showEmojis: !this.state.showEmojis }));\n  }\n\n  toggleInfoPanel = () => {\n    this.setState({ infoPanelActive: !this.state.infoPanelActive })\n  }\n\n  uploadFileDialog() {\n    this.fileInput.click();\n  }\n\n  fileChangedHandler(event) {\n    const { ipfs, sendMessage } = this.props;\n    const file = event.target.files[0];\n    uploadFileAndSend(ipfs, file, sendMessage);\n  }\n\n  addEmoji(emoji, chatInput, setValue) {\n    console.log(emoji);\n    setValue('chatInput', `${chatInput}:${emoji.id}:`);\n    this.setState(({showEmojis: false}), () => {\n      NameInput.current.labelNode.focus();\n    });\n  }\n\n  render() {\n    const { messages, sendMessage, currentChannel, usersTyping, typingEvent, channelUsers, allUsers, ipfs } = this.props;\n    const { showEmojis, infoPanelActive } = this.state;\n    const messagesHeight = `calc(100vh - ${messagesOffset}px)`;\n    return (\n      <div style={{ width: '100%', flexWrap: 'nowrap', display: 'flex', boxSizing: 'border-box' }} >\n        <input\n          type=\"file\"\n          ref={(input) => { this.fileInput = input; }}\n          onChange={this.fileChangedHandler.bind(this)}\n          style={{display: 'none'}}\n        />\n        <Grid xs={12} item>\n          <Dropzone\n            onDrop={(a, r) => {\n              onDrop(a, r, ipfs, sendMessage);\n            }}\n            disableClick\n            style={{ position: 'relative', height: '100%' }}\n            activeStyle={{\n              backgroundColor: 'grey',\n              outline: '5px dashed lightgrey',\n              alignSelf: 'center',\n              outlineOffset: '-10px'\n            }}>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"flex-start\"\n              alignItems=\"stretch\"\n              style={{ height: '100%' }}\n            >\n              <ChatHeader currentChannel={currentChannel} toggleSidebar={this.toggleInfoPanel} />\n              <Divider/>\n              <Grid container wrap=\"nowrap\">\n                <Grid xs={infoPanelActive ? 9 : 12} item style={{ overflowY: 'scroll' }}>\n                  <AutoScrollList style={{ height: messagesHeight, overflow: 'scroll' }}>\n                    {messages[currentChannel] && messages[currentChannel].map((message) => (\n                      <Fragment key={message.data.payload}>\n                        <ChatBox {...message} ipfs={ipfs}/>\n                        <li>\n                          <Divider/>\n                        </li>\n                      </Fragment>\n                    ))}\n                  </AutoScrollList>\n                  <Formik\n                    ref={ChatRoomForm}\n                    initialValues={{ chatInput: '' }}\n                    onSubmit={(values, { setSubmitting, resetForm }) => {\n                      const { chatInput } = values;\n                      sendMessage(chatInput);\n                      resetForm();\n                      setSubmitting(false);\n                    }}\n                  >\n                    {({\n                       values,\n                       errors,\n                       touched,\n                       handleChange,\n                       handleBlur,\n                       handleSubmit,\n                       setFieldValue\n                    }) => (\n                      <div className=\"chat-input\">\n                        <form onSubmit={handleSubmit} style={formStyle}>\n                          <Button onClick={(e) => this.uploadFileDialog()}><AddCircle /></Button>\n                          <TextField\n                            id=\"chatInput\"\n                            ref={NameInput}\n                            multiline\n                            style={{ width: 'auto', flexGrow: '0.95', margin: '2px 0 0 0' }}\n                            label=\"Type a message...\"\n                            type=\"text\"\n                            name=\"chatInput\"\n                            margin=\"normal\"\n                            variant=\"outlined\"\n                            fullWidth\n                            onChange={handleChange}\n                            onKeyDown={(e) => keyDownHandler(e, typingEvent, setFieldValue, values.chatInput)}\n                            onBlur={handleBlur}\n                            value={values.chatInput || ''}\n                          />\n                          {showEmojis && <Picker onSelect={(emoji) => this.addEmoji(emoji, values.chatInput, setFieldValue)}\n                                           style={{ position: 'absolute', bottom: '80px', right: '20px' }}/>}\n                          <Button onClick={(e) => this.toggleEmojis(e)}>Smile</Button>\n                          {errors.chatInput && touched.chatInput && errors.chatInput}\n                        </form>\n                        <WhoIsTyping\n                          currentChannel={currentChannel}\n                          usersTyping={usersTyping}\n                          users={allUsers}/>\n                      </div>\n                    )}\n                  </Formik>\n                </Grid>\n                <Grid xs={infoPanelActive ? 3 : false} item style={{ overflow: 'auto', borderLeft: '1px solid lightgrey', minHeight: '100vh' }}>{infoPanelActive && <Userlist />}</Grid>\n              </Grid>\n            </Grid>\n          </Dropzone>\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default ChatRoom;\n","// @flow\nimport React from 'react';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { ChatContext } from '../context';\n\nconst ChannelBox = ({ channelName, message }) => (\n  <ChatContext.Consumer>\n    {({ setActiveChannel, currentChannel, channels }) =>\n      <ListItem onClick={() => setActiveChannel(channelName)} selected={currentChannel == channelName} style={{\"cursor\": \"pointer\", \"padding\": \"0px 2px\"}}>\n        <ListItemText primary={\n          <span style={{\"color\": \"white\"}}>\n            {channels[channelName].username ? `${channels[channelName].username}` : `#${channelName}`}\n          </span>\n        } secondary={message}  />\n      </ListItem>\n    }\n  </ChatContext.Consumer>\n);\n\nexport default ChannelBox;\n","const CONTACT_CODE_REGEXP = /^(0x)?[0-9a-f]{130}$/i;\nexport const isContactCode = str => CONTACT_CODE_REGEXP.test(str);\n","// @flow\nimport React, { Fragment } from 'react';\nimport List from '@material-ui/core/List';\nimport ChannelBox from './ChannelBox';\nimport { isContactCode } from '../utils/parsers';\n\nconst ChannelBoxes = ({ channels }) => (\n  <div style={{ marginBottom: '50%' }}>\n    {channels.map((channel) => (\n      <Fragment key={channel}>\n        <ChannelBox channelName={channel} />\n      </Fragment>\n    ))}\n  </div>\n\n)\nconst ChannelList = ({ channels }) => {\n  const channelList = Object.keys(channels)\n  const onlyChannels = channelList.filter((i) => !isContactCode(i));\n  const directMessages = channelList.filter(isContactCode);\n\n  return (\n    <List>\n      <ChannelBoxes channels={onlyChannels} />\n      <span style={{ color: 'lightgray' }}>Direct Messages</span>\n      <ChannelBoxes channels={directMessages} />\n    </List>\n  )\n}\n\nexport default ChannelList;\n","import React, { Fragment } from 'react';\nimport { Formik } from 'formik';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport TextField from '@material-ui/core/TextField';\nimport AddCircle from '@material-ui/icons/AddCircle';\n\nclass ContextFilter extends React.Component {\n  state = {\n    open: false,\n  };\n\n  handleClickOpen = () => {\n    this.setState({ open: true });\n  };\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  render() {\n    const { open } = this.state;\n    const { joinConversation, name } = this.props;\n    return (\n      <Fragment>\n        <span onClick={this.handleClickOpen} style={{\"color\": \"#CAC4C9\", \"cursor\": \"pointer\"}}>\n          <span style={{\"width\": \"90%\", \"display\": \"inline-block\", \"verticalAlign\": \"top\"}}>{name}</span>\n          <AddCircle />\n        </span>\n        <Formik\n          initialValues={{ channel: '' }}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            const { channel } = values;\n            joinConversation(channel);\n            resetForm();\n            setSubmitting(false);\n            this.handleClose();\n          }}\n        >\n          {({\n            values,\n            errors,\n            touched,\n            handleChange,\n            handleBlur,\n            handleSubmit\n          }) => (\n            <Dialog\n              open={open}\n              onClose={this.handleClose}\n              aria-labelledby=\"form-dialog-title\"\n              >\n              <DialogTitle id=\"form-dialog-title\">Join Conversation</DialogTitle>\n              <DialogContent>\n                <DialogContentText>\n                  Enter the Channel, Contact Code or Username you would like to join\n                </DialogContentText>\n                <form onSubmit={handleSubmit}>\n                  <TextField\n                    autoFocus\n                    id=\"channel\"\n                    name=\"channel\"\n                    variant=\"outlined\"\n                    margin=\"dense\"\n                    label=\"Channel\"\n                    type=\"text\"\n                    fullWidth\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.channel || ''}\n                  />\n                  {errors.channel && touched.channel && errors.channel}\n                </form>\n              </DialogContent>\n              <DialogActions>\n                <Button onClick={this.handleClose} color=\"primary\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" onClick={handleSubmit} color=\"primary\">\n                  Join\n                </Button>\n              </DialogActions>\n            </Dialog>\n          )}\n        </Formik>\n      </Fragment>\n    );\n  }\n}\n\nexport default ContextFilter;\n","import React from 'react';\nimport ChannelList from './ChannelList';\nimport ContextFilter from './ContextFilter';\nimport styles from './ContextPanel.css';\n\nconst ContextPanel = ({ channels, joinConversation }) => (\n  <div className={styles.sidebar} style={{\"backgroundColor\": \"#4d394b\", \"height\": \"100%\", \"padding\": \"16px\", borderRight: '1px solid ghostwhite'}} >\n    <h3 style={{\"color\": \"white\"}}>Status</h3>\n    <ContextFilter name=\"Channels\" joinConversation={joinConversation} />\n    <ChannelList channels={channels} />\n  </div>\n);\n\nexport default ContextPanel;\n","import React from 'react';\n\nconst StatusLogo = () => (\n  <svg width=\"124\" height=\"124\" xmlns=\"http://www.w3.org/2000/svg\">\n    <path d=\"M72.458 61.429c-7.431.427-12.088-1.299-19.52-.871a31.245 31.245 0 0 0-5.47.796C48.565 47.65 58.292 35.662 71.519 34.9c8.117-.467 16.23 4.53 16.67 12.642.433 7.973-5.664 13.307-15.73 13.886M52.503 89.46c-7.776.438-15.547-4.24-15.969-11.831-.415-7.462 5.427-12.454 15.07-12.996 7.118-.4 11.58 1.216 18.698.815a30.589 30.589 0 0 0 5.24-.745C74.493 77.528 65.175 88.748 52.503 89.46M62 .181C27.758.18 0 27.857 0 62s27.758 61.82 62 61.82c34.242 0 62-27.678 62-61.82C124 27.858 96.242.18 62 .18\" fill=\"#4360DF\" fillRule=\"evenodd\"/></svg>\n)\n\nexport default StatusLogo\n","import React from 'react';\n\nconst JSLogo = () => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 630 630\">\n    <rect width=\"630\" height=\"630\" fill=\"#f7df1e\"/>\n    <path d=\"m423.2 492.19c12.69 20.72 29.2 35.95 58.4 35.95 24.53 0 40.2-12.26 40.2-29.2 0-20.3-16.1-27.49-43.1-39.3l-14.8-6.35c-42.72-18.2-71.1-41-71.1-89.2 0-44.4 33.83-78.2 86.7-78.2 37.64 0 64.7 13.1 84.2 47.4l-46.1 29.6c-10.15-18.2-21.1-25.37-38.1-25.37-17.34 0-28.33 11-28.33 25.37 0 17.76 11 24.95 36.4 35.95l14.8 6.34c50.3 21.57 78.7 43.56 78.7 93 0 53.3-41.87 82.5-98.1 82.5-54.98 0-90.5-26.2-107.88-60.54zm-209.13 5.13c9.3 16.5 17.76 30.45 38.1 30.45 19.45 0 31.72-7.61 31.72-37.2v-201.3h59.2v202.1c0 61.3-35.94 89.2-88.4 89.2-47.4 0-74.85-24.53-88.81-54.075z\"/>\n  </svg>\n)\n\nexport default JSLogo;\n","import React from 'react';\nimport StatusLogo from './status-logo';\nimport JSLogo from './js-logo';\n\nconst StatusJSLogo = () => (\n  <div style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\n    <StatusLogo />\n    <div style={{ width: '25%' }}>\n      <JSLogo />\n    </div>\n  </div>\n)\n\nexport default StatusJSLogo;\n","import React from 'react';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport { Formik } from 'formik';\nimport { func } from 'prop-types';\nimport { isNull } from 'lodash';\nimport StatusJSLogo from '../images/statusjs-logo';\n\nconst containerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'space-evenly',\n  height: '100vh',\n  width: '50%'\n};\nconst Login = ({ setupKeyringController, keyStore, wipeKeyStore, connect }) => (\n  <Grid\n    container\n    justify=\"center\"\n    alignItems=\"center\"\n    direction=\"column\"\n    style={{ height: '100%' }}\n  >\n\n    <Formik\n      initialValues={{ password: '', seed: '' }}\n  onSubmit={(values, { resetForm, setFieldError }) => {\n    const { password, seed } = values;\n        setupKeyringController(password, seed)\n          .catch(err => {\n            setFieldError(\"password\", err.message)\n          });\n        resetForm();\n      }}\n    >\n      {({\n         values,\n         errors,\n         handleChange,\n         handleBlur,\n         handleSubmit\n      }) => (\n        <form onSubmit={handleSubmit} style={containerStyle}>\n          <StatusJSLogo />\n\n          <div>\n          note that no plugins are required, just a compatible browser. Currently recommended are Chrome and Firefox.<br />\n          <strong>Note: This is a proof of concept, and an alpha version. There will be bugs. If you're looking for something more stable try the <a target=\"_blank\" href=\"https://status.im/get_desktop/\">status desktop app</a>.</strong>\n          <br />known issues:\n          <br />- Only tested in Chrome & Firefox. Reportedly works on android mobile browsers but not on ios (to be confirmed). In theory it should work on any webrtc enabled browser.\n          <br />- Direct chats and chat history is currently disabled.\n          </div>\n\n          <Button size=\"large\" variant=\"outlined\" color=\"primary\" onClick={() => connect()}>\n            USE A ONE TIME RANDOM ACCOUNT (Recommended)\n          </Button>\n\n          <div> or for dev purposes:</div>\n          {isNull(keyStore) && <TextField\n                                 id=\"seed\"\n                                 type=\"text\"\n                                 name=\"seed\"\n                                 rows=\"4\"\n                                 multiline\n                                 label=\"Enter your 12 word mnemonic\"\n                                 variant=\"outlined\"\n                                 fullWidth\n                                 value={values.seed}\n                                 onBlur={handleBlur}\n                                 onChange={handleChange}\n          />}\n          <TextField\n            id=\"password\"\n            type=\"password\"\n            name=\"password\"\n            label={isNull(keyStore) ? \"Set your password\" : \"Enter your password to login\"}\n            variant=\"outlined\"\n            fullWidth\n            error={errors.password}\n            helperText={errors.password}\n            value={values.password}\n            onBlur={handleBlur}\n            onChange={handleChange}\n          />\n          {!isNull(keyStore) && <Button size=\"large\" variant=\"outlined\" color=\"secondary\" onClick={wipeKeyStore}>\n            RESET ACCOUNT\n          </Button>}\n        </form>\n      )}\n    </Formik>\n  </Grid>\n);\n\nLogin.propTypes = {\n  setupKeyringController: func.isRequired,\n  wipeKeyStore: func.isRequired,\n  connect: func.isRequired\n};\n\nexport default Login;\n","export class User {\n  constructor(pubkey, username) {\n    this.pubkey = pubkey;\n    this.username = username;\n    this.online = false;\n    this.lastSeen = 0;\n  }\n}\n","import KeyringController from 'eth-keyring-controller';\nimport Store from './store';\n\nconst store = new Store({ configName: 'keyManagement', defaults: { vault: null } });\nexport const createVault = async (password, mnemonic) => {\n  const keyRingController = new KeyringController({});\n  const controller = await keyRingController.createNewVaultAndRestore(password, mnemonic);\n  const vault = keyRingController.store.getState();\n  storeKeyData(JSON.stringify(vault));\n  return keyRingController;\n}\n\nexport const restoreVault = async (password) => {\n  const keyStore = JSON.parse(getKeyData());\n  const keyRingController = new KeyringController({\n    initState: keyStore\n  });\n  const controller = await keyRingController.submitPassword(password);\n  return keyRingController;\n}\n\nexport const getKeyData = () => store.get('vault');\nexport const storeKeyData = vault => {\n  store.set('vault', vault);\n}\nexport const wipeVault = () => { store.set('vault', null); }\n","export default class Store {\n  constructor(opts) {}\n\n  get(key) {\n    return localStorage.getItem(key);\n  }\n\n  set(key, val) {\n    localStorage.setItem(key, val);\n  }\n}\n","import React from 'react';\nimport { css } from 'react-emotion';\nimport { BounceLoader, GridLoader } from 'react-spinners';\n\nconst containerStyle = { display: 'flex', justifyContent: 'center', alignItems: 'center', height: '100vh', margin: '0 30% 0 30%' };\nexport const FullScreenLoader = () => (\n  <div className='sweet-loading' style={containerStyle}>\n    <BounceLoader\n      sizeUnit={\"px\"}\n      size={150}\n      color={'#4A90E2'}\n    />\n  </div>\n)\n\nexport const FullScreenGridLoader = () => (\n  <div className='sweet-loading' style={containerStyle}>\n    <GridLoader\n      sizeUnit={\"px\"}\n      size={25}\n      color={'#4A90E2'}\n    />\n  </div>\n)\n\n","export const openBrowserWindow = url => {\n  window.open(url, '_blank', 'nodeIntegration=no');\n}\n\nexport const addWindowEventListeners = (sendMessage) => {\n  const verbose = window.statusVerbose\n  window.addEventListener('message', function (msg) {\n    if(window.statusVerbose) console.log('message', msg)\n    if (msg.source === window.parent && window.statusVerbose) {\n      console.log(msg.data)\n    }\n\n    if (msg.data && msg.data.type && msg.data.type === 'whisperMsg') {\n      sendMessage(msg.data.msg)\n    }\n  })\n}\n","// @flow\nimport React, { PureComponent, Fragment } from 'react';\nimport StatusJS from 'status-js-api';\nimport Murmur from 'murmur-client';\nimport IPFS from 'ipfs';\nimport uuid from 'uuid/v4';\nimport { isNil } from 'lodash';\nimport Grid from '@material-ui/core/Grid';\nimport ChatRoom from './ChatRoom';\nimport ContextPanel from './ContextPanel';\nimport Login from './Login';\nimport { User } from '../utils/actors';\nimport { ChatContext } from '../context';\nimport { isContactCode } from '../utils/parsers';\nimport { getKeyData, createVault, restoreVault, wipeVault } from '../utils/keyManagement';\nimport { FullScreenLoader } from './Loaders';\nimport { openBrowserWindow, addWindowEventListeners } from '../utils/windows';\n\nconst typingNotificationsTimestamp = {};\n\n\nconst DEFAULT_CHANNEL = \"status-js\";\nconst URL = \"ws://localhost:8546\";\nconst status = new StatusJS();\n\ntype Props = {};\n\nexport default class Home extends PureComponent<Props> {\n  props: Props;\n\n  state = {\n    messages: { [DEFAULT_CHANNEL]: [] },\n    users: {},\n    channels: {\n      [DEFAULT_CHANNEL]: { users: {} }\n    },\n    currentChannel: DEFAULT_CHANNEL,\n    usersTyping: { [DEFAULT_CHANNEL]: [] },\n    identity: {},\n    loading: false,\n    keyStore: getKeyData()\n  };\n\n  componentDidMount() {\n    this.connectMurMur();\n    this.ipfs = new IPFS();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.pingInterval);\n    this.ipfs.shutdown();\n  }\n\n  connect = async (account) => {\n    if (!account) {\n      this.setState({ loading: true });\n      status.connectToProvider(this.server.provider, null);\n      return this.onConnect();\n    }\n\n    this.keyringController.exportAccount(account)\n        .then(key => { status.connect(URL, `0x${key}`) })\n        .then(() => { this.onConnect() })\n  };\n\n  connectMurMur() {\n    this.server = new Murmur({\n      protocols: [\"libp2p\"],\n      // signalServer: { host: '104.248.64.24', port: '9090', protocol: 'ws' },\n      signalServers: [\n        \"/dns4/cryptolife.status.im/tcp/443/wss/p2p-webrtc-star\"\n      ],\n      bootnodes: []\n    });\n    this.server.start();\n  }\n\n  onConnect = () => {\n    const { currentChannel } = this.state;\n    this.joinChannel(currentChannel);\n    this.pingChannel();\n    this.createOnUserMessageHandler();\n    //TODO store ref to clear on componentWillUnmount\n    addWindowEventListeners(this.sendMessage);\n    setTimeout(() => {\n      this.getMyIdentities();\n      // Uncomment to test signing to status channels\n      //this.openBrowser('http://localhost:3000/sign-and-verify-message/sign');\n    }, 1500);\n  }\n\n  openBrowser = (url) => {\n    openBrowserWindow(url);\n  }\n\n  pingChannel = (channelName) => {\n    const { currentChannel } = this.state;\n    this.pingInterval = setInterval(() => {\n      status.sendJsonMessage(channelName || currentChannel, {type: \"ping\"});\n    }, 5 * 1000)\n  }\n\n  setupKeyringController = async (password, mnemonic) => {\n    const { keyStore } = this.state;\n    if (!keyStore) {\n      this.keyringController = await createVault(password, mnemonic);\n    } else {\n      try {\n        this.keyringController = await restoreVault(password);\n      } catch(err) {\n        throw err;\n      }\n    }\n    this.setState({ loading: true });\n    const accounts = await this.keyringController.getAccounts();\n    this.connect(accounts[0]);\n  }\n\n  wipeKeyStore = () => {\n    wipeVault();\n    this.setState({ keyStore: null });\n  }\n\n  setActiveChannel = channelName => {\n    this.setState({ currentChannel: channelName,  });\n  }\n\n  joinConversation = contact => {\n    const { joinChannel, addDirectMessage } = this;\n    if (isContactCode(contact)) {\n      addDirectMessage(contact)\n    } else {\n      joinChannel(contact)\n    }\n  }\n\n  addDirectMessage = contactCode => {\n    status.addContact(contactCode, () => {\n      this.addConversationEntry(contactCode);\n    })\n  }\n\n  addConversationEntry = (code, changeChannel = true) => {\n    const { channels, currentChannel } = this.state;\n    this.setState({\n      currentChannel: changeChannel ? code : currentChannel,\n      channels: {\n        ...channels,\n        [code]: { users: {} }\n      }\n    })\n  }\n\n  joinChannel = channelName => {\n    status.joinChat(channelName, () => {\n      this.addConversationEntry(channelName);\n      console.log(`joined channel ${channelName}`);\n      status.onMessage(channelName, (err, data) => {\n        const msg = JSON.parse(data.payload)[1][0];\n\n        if (JSON.parse(data.payload)[1][1] === 'content/json') {\n          return this.handleProtocolMessages(channelName, data);\n        }\n        const message = { username: data.username, message: msg, pubkey: data.data.sig, data };\n        this.setState((prevState) => {\n          const existing = prevState.messages[channelName];\n          return {\n            messages: {\n              ...prevState.messages,\n              [channelName]: existing ? [ ...existing, message ] : [ message ]\n            }\n          }\n        })\n      });\n      this.pingChannel(channelName);\n    });\n  }\n\n  createOnUserMessageHandler = () => {\n    status.onUserMessage((err, res) => {\n      if (res) {\n        const payload = JSON.parse(res.payload);\n        const msg = payload[1][0];\n        const sender = res.data.sig;\n        const message = { username: res.username, message: msg, data: res };\n        this.setState((prevState) => {\n          const existing = prevState.messages[sender];\n          return {\n            messages: {\n              ...prevState.messages,\n              [sender]: existing ? [ ...existing, message ] : [ message ]\n            },\n            channels: {\n              ...prevState.channels,\n              [sender]: { username: res.username, users: {} }\n            }\n          }\n        })\n      }\n    });\n  }\n\n  sendMessage = message => {\n    const { currentChannel } = this.state;\n    status.sendMessage(currentChannel, message);\n  }\n\n  addUserToChannel = (channelName, user) => {\n    const { channels } = this.state;\n    const channel = { ...channels[channelName] };\n    channel.users[user.pubkey] = user;\n    this.setState({ channels: { ...channels, [channelName]: channel }});\n  }\n\n  getChannel = channelName => {\n    const { channels } = this.state;\n    return channels.find(c => c.name === channelName);\n  }\n\n  getMyIdentities = async () => {\n    const publicKey = await status.getPublicKey();\n    const username = await status.getUserName(publicKey);\n    this.setState({\n      identity: { publicKey, username },\n      loading: false\n    })\n\n  }\n\n  handleProtocolMessages = (channelName, data) => {\n    const { identity: { publicKey } } = this.state\n    const msg = JSON.parse(JSON.parse(data.payload)[1][0]);\n    const fromUser = data.data.sig;\n\n    if (msg.type === 'ping') {\n      const user = this.addOrUpdateUserKey(fromUser, data.username);\n      this.addUserToChannel(channelName, user);\n    }\n\n    if (msg.type === 'typing' && fromUser !== publicKey) {\n      this.setState(prevState => ({\n        usersTyping: {\n          ...prevState.usersTyping,\n          [channelName]: {\n            [fromUser]: (new Date().getTime())\n          }\n        }\n      }))\n    }\n  }\n\n  addOrUpdateUserKey = (pubkey, username) => {\n    const user = new User(pubkey, username);\n    user.lastSeen = (new Date().getTime());\n    user.online = true;\n    this.setState(prevState => ({\n      users: {\n        ...prevState.users,\n        [pubkey]: user\n      }\n    }))\n    return user;\n  }\n\n  typingEvent = () => {\n    const { currentChannel } = this.state;\n    const now = (new Date().getTime());\n\n    if (!typingNotificationsTimestamp[currentChannel]) {\n      typingNotificationsTimestamp[currentChannel] = { lastEvent: 0 }\n    }\n    if (typingNotificationsTimestamp[currentChannel].lastEvent === 0 || now - typingNotificationsTimestamp[currentChannel].lastEvent > 3*1000) {;\n      typingNotificationsTimestamp[currentChannel].lastEvent = now;\n      status.sendJsonMessage(currentChannel, {type: \"typing\"});\n    }\n  }\n\n  render() {\n    const { messages, channels, currentChannel, users, usersTyping, identity, loading, keyStore } = this.state;\n    const channelUsers = channels[currentChannel].users;\n    const { setActiveChannel, setupKeyringController, wipeKeyStore, connect, ipfs } = this;\n    const chatContext = { setActiveChannel, currentChannel, users, channels };\n\n    return (\n      <ChatContext.Provider value={chatContext}>\n        {loading\n         ? <FullScreenLoader />\n         : <Fragment>\n           {!identity.publicKey\n            ? <Login\n                connect={connect}\n                setupKeyringController={setupKeyringController}\n                keyStore={keyStore}\n                wipeKeyStore={wipeKeyStore} />\n            : <div style={{ width: '100%', flexWrap: 'nowrap', display: 'flex', boxSizing: 'border-box' }} >\n              <Grid item xs={2}>\n                {!isNil(channels) &&\n                  <ContextPanel\n                    channels={channels}\n                    joinConversation={this.joinConversation} />}\n              </Grid>\n              <Grid item xs={10}>\n                  <ChatRoom\n                    messages={messages}\n                    sendMessage={this.sendMessage}\n                    currentChannel={currentChannel}\n                    usersTyping={usersTyping}\n                    typingEvent={this.typingEvent}\n                    channelUsers={channelUsers}\n                    allUsers={users}\n                    ipfs={ipfs}\n                  />\n              </Grid>\n            </div>}\n         </Fragment>}\n      </ChatContext.Provider>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport Home from './components/Home'\nimport logo from './logo.svg';\n\nclass App extends Component {\n  render() {\n    return <Home />\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}